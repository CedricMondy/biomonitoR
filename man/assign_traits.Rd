% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assign_traits.R, R/average_traits.R,
%   R/sample_traits.R
\name{assign_traits}
\alias{assign_traits}
\alias{average_traits}
\alias{sample_traits}
\title{assign_traits}
\usage{
assign_traits(
  x,
  trait_db = NULL,
  group = "mi",
  tax_lev = "Taxa",
  dfref = NULL,
  filter_by_distance = NULL
)

average_traits(x, col_blocks = NULL)

sample_traits(x)
}
\arguments{
\item{x}{Results of \code{aggregate_taxa()}}

\item{trait_db}{A trait data base with a column \code{Taxa} and the other columns
containing the traits.
By default, the database used is the one from Tachet \emph{et al} (2010) that
can be retrieved from
\href{https://www.freshwaterecology.info/}{freshwaterecology.info} website
(Schmidt-Kloiber & Hering, 2015).
It includes traits only for macroinvertebrates.}

\item{group}{Biotic group of interest. Possible values are \code{mi} for macroinvertebrates, \code{mf} for macrophytes and \code{fi} for fish.
The choice will set the right reference database for the specified group.
This option will not be considered if a custom reference database is provided. Default to \code{mi}.}

\item{tax_lev}{Taxonomic level on which the calculation has to be made.
Default to \code{Taxa}, the maximum taxonomic level is \code{Family}.}

\item{dfref}{Reference database as used in the function aggregatoR.}

\item{filter_by_distance}{Filter the results according to the taxonomic distance. Possible values are \code{pos}, \code{neg} or a positive integer. See details.}

\item{col_blocks}{A vector that contains the number of modalities for each trait}
}
\description{
A function for scaling traits across taxonomic levels.
}
\details{
This function allows to obtain missing traits for a target taxon by taking traits from lower or to upper taxomic levels.
For instance, consider the case where the genus Acroloxus is present in the user dataset and the species Acroloxus lacustris
in the traits database. A simple merge would exclude Acroloxus from the tha analysis since Acroloxus and A. lacustris
would not match. The function traitScaling allows to assign Acroloxus lacustris traits to Acroloxus.
This function works also in the opposite direction. Consider the case where there are no traits for the target taxon and
the target taxon has not been identified at species level. The function traitScaling will assign the traits of the nearest taxonomic level
to the target taxa (e.g. Tanypodinae traits assign to Ablabesmyia monilis). Consider also these examples to understand the behaviour of this
function. For instance Anabolia lombarda is present in the user taxomic dataset while only Anabolia nervosa and Anabolia are present
in the trait database. In this case traitScaling will assing to A. lombarda only the traits of Anabolia.
Moreover, let assume that Coelostoma is present in the user dataset while only Berosus and Crenitis punctatostriata are present in the traits database.
Here traitScaling will assign to Coelostoma the scores of Berosus and C. punctatostriata since they belong to the same family and there are no information at family level. \cr \cr
The function traitScaling will measure the taxonomic distance between the target taxa and the taxa used to assign the trait score. This distance
can be negative (e.g. Species to Genus) and positive (e.g. Genus to Species). The distance is measured assigning values as follows:
1 (Species to Genus) , 2 (Species to family), -1 (Family to Genus), etc. traitScaling considers only the
taxonomic levels from Subspecies to Family (Subspecies, Species, Genus, Tribus, Subfamily, Family).
}
\section{Functions}{
\itemize{
\item \code{average_traits}: average traits values for fuzzy data

\item \code{sample_traits}: sample_traits
}}

\examples{
data(macro_ex)

data_bio <- as_biomonitor(macro_ex)
data_agr <- aggregate_taxa(data_bio)
data_ts <- assign_traits(data_agr)

# select only the nearest traits
data_ts_sub <- manage_traits(data_ts, method = "nearest+-")

# averaging
data_ts_av <- average_traits(data_ts_sub)

# traits random sampling
data_ts_st <- sample_traits(data_ts)
}
\seealso{
\link{aggregate_taxa}
}
